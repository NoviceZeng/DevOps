// 所需插件: Git Parameter/Git/Pipeline/Config File Provider/kubernetes/Extended Choice Parameter
pipeline {
    agent {
        kubernetes {
		    label "jenkins-slave"
                yaml """
kind: Pod
metadata:
  name: jenkins-slave
spec:
  containers:
  - name: jnlp
    image: "10.70.128.51/library/jenkins-slave:jdk-1.8"   
    imagePullPolicy: Always
    volumeMounts:
      - name: docker-cmd 	
        mountPath: /usr/bin/docker
      - name: docker-sock
        mountPath: /var/run/docker.sock
      - name: maven-cache
        mountPath: /root/.m2
  volumes:
    - name: docker-cmd
      hostPath:
        path: /usr/bin/docker
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
    - name: maven-cache
      hostPath:
        path: /tmp/m2
"""
        }      
    }

	environment {
        //Harbor镜像仓库地址
        registry = "10.70.128.51"
        //Harbor项目名称，根据项目实际，可以直接引用，不用定义变量也行
        project = "microservice"
        
  		harbor_registry_auth = "27e8ae31-f1c5-43fc-9869-1ae854268b80"
		image_pull_secret = "registry-pull-secret"	
        
		git_url = "http://10.70.128.51:9999/novice/ms.git"
        git_auth = "3e835506-6bb8-4994-af1d-7dab30d49c13"

		k8s_auth = "aeb7a1db-a129-4d96-9a7b-9f84350001f2"
		gateway_domain_name = "gateway.ctnrs.com"
		portal_domain_name = "portal.ctnrs.com"
	}	

    parameters {
        gitParameter branch: '', branchFilter: '.*', defaultValue: '', description: '选择发布的分支', name: 'Branch', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*', type: 'PT_BRANCH'        
        extendedChoice defaultValue: 'none', description: '选择发布的微服务', multiSelectDelimiter: ',', name: 'Service', type: 'PT_CHECKBOX', value: 'gateway-service:9999,portal-service:8080,product-service:8010,order-service:8020,stock-service:8030'
        choice (choices: ['ms', 'demo'], description: '部署模板', name: 'Template')
        choice (choices: ['1', '3', '5', '0'], description: '副本数', name: 'ReplicaCount')
        //此处可以不用定义参数，直接引用ms
        choice (choices: ['ms'], description: '命名空间', name: 'Namespace')
    }
	
    stages {
        stage('拉取代码'){
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "${params.Branch}"]], userRemoteConfigs: [[credentialsId: "${git_auth}", url: "${git_url}"]]])
            }
        }
        
        stage('代码编译') {
            // 编译指定服务
            steps {
                sh "mvn clean package -Dmaven.test.skip=true"
            }
        }
        
        stage('构建镜像') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${harbor_registry_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh """
                        docker login -u ${username} -p '${password}' ${registry}
                        #遍历extendedChoice中选定的service的Service
                        for service in \$(echo ${Service} |sed 's/,/ /g'); do
                            service_name=\${service%:*}
                            image_name=${registry}/${project}/\${service_name}:${BUILD_NUMBER}
                            cd \${service_name}
                            #if Dockerfile在biz目录下
                            if ls |grep biz &>/dev/null; then
                                cd \${service_name}-biz
                            fi
                            docker build -t \${image_name} .
                            docker push \${image_name}
                            cd ${WORKSPACE}
                        done
                    """
                    
                    configFileProvider([configFile(fileId: "${k8s_auth}", targetLocation: "admin.kubeconfig")]){
                        sh """
                            # 添加镜像拉取认证
                            kubectl create secret docker-registry ${image_pull_secret} --docker-username=${username} --docker-password=${password} --docker-server=${registry} -n ${Namespace} --kubeconfig admin.kubeconfig |true
                            # 添加私有chart仓库
                            helm repo add  --username ${username} --password ${password} myrepo http://${registry}/chartrepo/${project}
                        """
                    }
                }
            }
        }
        
        stage('Helm部署到K8S') {
            steps {
                sh """
                    common_args="-n ${Namespace} --kubeconfig admin.kubeconfig"   
                    #遍历extendedChoice中选定的service的Service
                    for service in  \$(echo ${Service} |sed 's/,/ /g'); do
                        service_name=\${service%:*}
                        service_port=\${service#*:}
                        image=${registry}/${project}/\${service_name}
                        tag=${BUILD_NUMBER}
                        #service.targetPort必须和Dockfile中EXPOSE的port、以及代码中配置的port保持一致，此处Service.Port使用helm value.yaml中配置的默认值，ingress根据域名service name区分不同服务
                        helm_args="\${service_name} --set image.repository=\${image} --set image.tag=\${tag} --set replicaCount=${replicaCount} --set imagePullSecrets[0].name=${image_pull_secret} --set service.targetPort=\${service_port} myrepo/${Template}"
                        
                        # 判断是否为新部署
                        if helm history \${service_name} \${common_args} &>/dev/null;then
                          action=upgrade
                        else
                          action=install
                        fi
                        
                        # 针对服务启用ingress
                        if [ \${service_name} == "gateway-service" ]; then
                          helm \${action} \${helm_args} \
                          --set ingress.enabled=true \
                          --set ingress.host=${gateway_domain_name} \
                           \${common_args}
                        elif [ \${service_name} == "portal-service" ]; then
                          helm \${action} \${helm_args} \
                          --set ingress.enabled=true \
                          --set ingress.host=${portal_domain_name} \
                           \${common_args}
                        else
                          helm \${action} \${helm_args} \${common_args}
                        fi
                    done
                    # 查看Pod状态
                    sleep 10
                    kubectl get pods \${common_args}
                """
            }
        }        
    }
}
