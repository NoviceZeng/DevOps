// 公共
def registry = "192.168.3.253"
// 项目
def project = "welcome"
def app_name = "demo"
def image_name = "${registry}/${project}/${app_name}:${BUILD_NUMBER}"
def git_address = "git@192.168.3.253:/home/git/java-demo.git"
// 认证 master执行 kubectl create secret docker-registry registry-pull-secret --docker-username=admin --docker-password=Harbor12345 --docker-email=thomson@e-veb.com --docker-server=192.168.3.253
def secret_name = "registry-pull-secret"
def docker_registry_auth = "99b3efbf-7c0c-4441-a8a1-46111f832a7e"
// 配置时，出现Jenkins认证git仓库的账密失败，换成master的private key认证成功(master可以免密登录git仓库)
def git_auth = "da0d4cd1-272c-4e20-9eec-f928fb2175df"
//harbor仓库出现认证失败，重新安装部署即可,docker版本可能导致部署失败,本部署中用18.06.2-ce
def k8s_auth = "80e66a86-d189-4555-b1ef-054285031b7a"

//首先要构建Jenkins-slave镜像,镜像中安装maven curl git等环境，因为要挂在docker，使用git，所以这里需要自定义slave
//Kubernetes插件：在k8s中运行动态代理的Jenkins插件 插件介绍：https://github.com/jenkinsci/kubernetes-plugin
podTemplate(label: 'jenkins-slave', cloud: 'kubernetes', containers: [
    containerTemplate(
        name: 'jnlp',
        image: "${registry}/library/jenkins-slave-jdk:1.8"
    ),
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
    hostPathVolume(mountPath: '/usr/bin/docker', hostPath: '/usr/bin/docker')
  ],
)
{
  node("jenkins-slave"){
      // 第一步
      stage('拉取代码'){
         checkout([$class: 'GitSCM', branches: [[name: '${Branch}']], userRemoteConfigs: [[credentialsId: "${git_auth}", url: "${git_address}"]]])
      }
      // 第二步
      stage('代码编译'){
          sh "mvn clean package -Dmaven.test.skip=true"
      }
      // 第三步
      stage('构建镜像'){
          withCredentials([usernamePassword(credentialsId: "${docker_registry_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
            sh """
              echo '
                FROM novicezeng/tomcat
                RUN rm -rf /usr/local/tomcat/webapps/*
                ADD target/*.war /usr/local/tomcat/webapps/ROOT.war
              ' > Dockerfile
              ls
              ls target
              docker build -t ${image_name} .
              docker login -u ${username} -p '${password}' ${registry}
              docker push ${image_name}
            """
            }
      }
      // 第四步，部署的deploy.yml在第一步拉取代码时已经拉取下来，Kubernetes Continuous Deploy插件：用于将资源配置部署到Kubernetes.插件介绍：https://plugins.jenkins.io/kubernetes-cd
      stage('部署到K8S平台'){
          sh """
          sed -i 's#\$IMAGE_NAME#${image_name}#' deploy.yml
          sed -i 's#\$SECRET_NAME#${secret_name}#' deploy.yml
          """
          kubernetesDeploy configs: 'deploy.yml', kubeconfigId: "${k8s_auth}"
      }
  }
}
